// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             BigInt    @id @default(autoincrement())
  email          String    @unique()
  phone          String?   @unique()
  password_hash  String
  first_name     String
  last_name      String
  user_type      UserType  @default(CUSTOMER)
  status         Status    @default(PENDING)
  email_verified Boolean   @default(false)
  phone_verified Boolean   @default(false)
  avatar_url     String?   
  language       Language  @default(AR)
  dark_mode      Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  last_login     DateTime?

  @@index([email], name: "idx_email")
  @@index([phone], name: "idx_phone")
  @@index([user_type], name: "idx_user_type")
  @@index([status], name: "idx_status")

  User2FA User2FA[]  //relation with user2fa
  PasswordResetToken PasswordResetToken[] //relation in reset password
  CustomerProfile CustomerProfile[] //customer relation
  SupplierProfile SupplierProfile[] //supplier
  UserAddress UserAddress[] //address of the user
  Product Product[] //only done by a supplier
  ProductReview ProductReview[] //the user who reviewed the product
  Order Order[] //his orders
  ReviewVote ReviewVote[] //user who voted
  supplier_reviews SupplierReview[] @relation("Customer") // User who reviewed the supplier
  suppliers_reviews SupplierReview[] @relation("Supplier") // Reviews where this user is the supplier being reviewed
  PrescriptionOwner Prescription[] @relation("PrescriptionOwner") //owner of Prescription
  PrescriptionVerifier Prescription[] @relation("PrescriptionVerifier") //verifier of Prescription
  Notification Notification[] //witch user had the notification
  NotificationPreference NotificationPreference[] //settings 
  ReportedTickets SupportTicket[] @relation("SupportReporter") //those 3 are obvious
  AssignedTickets SupportTicket[] @relation("SupportAssignee")
  ResolvedTickets SupportTicket[] @relation("SupportResolver")
  SupportTicketMessage SupportTicketMessage[] //user who left the message
  ChatSessionsAsUser LiveChatSession[] @relation("ChatUser")
  ChatSessionsAsAgent LiveChatSession[] @relation("ChatAgent")
  LiveChatMessage LiveChatMessage[] @relation("ChatMessageSender")
  UserActivityLog UserActivityLog[]
  SearchQuery SearchQuery[]
  PageView PageView[]
  AdminActivityLog AdminActivityLog[]
}

enum UserType {
  CUSTOMER
  SUPPLIER
  ADMIN
  DELIVERY
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum Language {
  AR
  FR
  EN
}

model User2FA {
  id          BigInt    @id @default(autoincrement())
  user_id     BigInt @unique
  secret_key  String
  backup_codes Json?
  is_enabled  Boolean   @default(false)
  created_at  DateTime  @default(now())

  // Relation to User
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_user_id")
}

model PasswordResetToken {
  id         BigInt    @id @default(autoincrement())
  user_id    BigInt
  token      String    @unique
  expires_at DateTime
  used       Boolean   @default(false)
  created_at DateTime  @default(now())

  // Relation to User
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([token], name: "idx_token")
  @@index([expires_at], name: "idx_expires")
}

model CustomerProfile {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt     @unique
  date_of_birth       DateTime?
  gender              Gender?    
  national_id         String?    
  profession          String?    
  medical_license     String?    
  organization_name   String?    
  organization_type   OrganizationType?
  tax_number          String?    
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt

  // Relation to User
  user                User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([organization_type], name: "idx_organization_type")
}

enum Gender {
  male
  female
}

enum OrganizationType {
  hospital
  clinic
  pharmacy
  individual
}

model SupplierProfile {
  id                     BigInt     @id @default(autoincrement())
  user_id                BigInt     @unique
  company_name           String
  company_registration   String
  tax_number             String
  medical_license        String?
  business_type          BusinessType?
  verification_status    VerificationStatus @default(pending)
  verification_documents Json?
  annual_revenue         Decimal?
  established_year       Int?
  employee_count         Int?
  warehouse_capacity     Int?
  subscription_type      SubscriptionType @default(basic)
  subscription_expires_at DateTime?
  commission_rate        Decimal @default(5.00)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  // Relation to User
  user                   User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([verification_status], name: "idx_verification_status")
  @@index([business_type], name: "idx_business_type")
}

enum BusinessType {
  manufacturer
  distributor
  retailer
  importer
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum SubscriptionType {
  basic
  premium
  enterprise
}

model Wilaya {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  name_ar      String
  name_fr      String
  name_en      String
  delivery_fee Decimal  @default(0.0)
  is_active    Boolean  @default(true)

  @@index([code], name: "idx_wilaya_code")
  Commune Commune[]  //communs of the wilaya
  UserAddress UserAddress[] //addresses in the wilaya
}

model Commune {
  id                    Int       @id @default(autoincrement())
  wilaya_id             Int       
  code                  String    
  name_ar               String    
  name_fr               String    
  name_en               String    
  postal_code           String?   
  additional_delivery_fee Decimal  @default(0.0)
  is_active             Boolean   @default(true)

  // Relation to Wilaya
  wilaya                Wilaya    @relation(fields: [wilaya_id], references: [id])

  @@index([wilaya_id], name: "idx_wilaya_id")
  @@index([code], name: "idx_commune_code")
  UserAddress UserAddress[] //cummne address
}

model UserAddress {
  id              BigInt     @id @default(autoincrement())
  user_id         BigInt
  wilaya_id       Int
  commune_id      Int
  address_line1   String
  address_line2   String?
  postal_code     String?
  landmark        String?
  phone           String?
  is_default      Boolean    @default(false)
  address_type    AddressType @default(HOME)
  recipient_name  String?
  notes           String?
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  // Relations
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  wilaya          Wilaya     @relation(fields: [wilaya_id], references: [id])
  commune         Commune    @relation(fields: [commune_id], references: [id])

  @@index([user_id], name: "idx_user_address_id")
  @@index([wilaya_id, commune_id], name: "idx_wilaya_commune")
  Order Order[] //orders that been to this address
}

enum AddressType {
  HOME
  WORK
  OTHER
}

model Category {
  id              Int       @id @default(autoincrement())
  parent_id       Int?
  name_ar         String
  name_fr         String
  name_en         String
  description_ar  String?
  description_fr  String?
  description_en  String?
  icon            String?
  image_url       String?
  sort_order      Int       @default(0)
  is_active       Boolean   @default(true)
  seo_title       String?
  seo_description String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // Self-referencing relation for parent category
  parent          Category? @relation("CategoryParent", fields: [parent_id], references: [id], onDelete: SetNull)
  children        Category[] @relation("CategoryParent")

  @@index([parent_id], name: "idx_parent_id")
  @@index([is_active], name: "idx_active")
  @@index([sort_order], name: "idx_sort_order")
  Product Product[] //product have a category
}

model Brand {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  description_ar String?
  description_fr String?
  description_en String?
  logo_url       String?
  website        String?
  country_origin String?
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())

  @@index([name], name: "idx_name")
  @@index([is_active], name: "idx_brand_active")
  Product Product[] //product have a brand
}

model Product {
  id                     BigInt     @id @default(autoincrement())
  supplier_id            BigInt
  category_id            Int
  brand_id               Int?
  sku                    String     @unique
  barcode                String?
  name_ar                String
  name_fr                String
  name_en                String
  description_ar         String?
  description_fr         String?
  description_en         String?
  short_description_ar   String?
  short_description_fr   String?
  short_description_en   String?
  specifications         Json?
  ingredients            String?
  usage_instructions_ar  String?
  usage_instructions_fr  String?
  usage_instructions_en  String?
  warnings_ar            String?
  warnings_fr            String?
  warnings_en            String?
  requires_prescription  Boolean    @default(false)
  prescription_type      PrescriptionType @default(none)
  age_restriction        Int?
  weight                 Decimal?
  dimensions             String?
  material               String?
  sterile                Boolean    @default(false)
  disposable             Boolean    @default(false)
  expiry_tracking        Boolean    @default(false)
  batch_tracking         Boolean    @default(false)
  status                 ProductStatus @default(draft)
  approval_status        ApprovalStatus @default(pending)
  rejection_reason       String?
  meta_title             String?
  meta_description       String?
  meta_keywords          String?
  slug                   String     @unique
  featured               Boolean    @default(false)
  created_at             DateTime   @default(now())
  updated_at             DateTime   @updatedAt

  // Relations
  supplier               User       @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  category               Category   @relation(fields: [category_id], references: [id])
  brand                  Brand?     @relation(fields: [brand_id], references: [id], onDelete: SetNull)

  @@index([supplier_id], name: "idx_supplier_id")
  @@index([category_id], name: "idx_category_id")
  @@index([brand_id], name: "idx_brand_id")
  @@index([sku], name: "idx_sku")
  @@index([status], name: "idx_product_status")
  @@index([approval_status], name: "idx_approval_status")
  @@index([featured], name: "idx_featured")
  @@index([requires_prescription], name: "idx_requires_prescription")

  //full text index search can be done on queries
  //not supported by postgresql
  ProductImage ProductImage[] //product have an image
  ProductReview ProductReview[] //can have review or reviews
  PrescriptionItemOriginal PrescriptionItem[] @relation("OriginalProduct") //original id
  PrescriptionItemMatched PrescriptionItem[] @relation("MatchedProduct") //matched id
  SearchQuery SearchQuery[]
}

enum PrescriptionType {
  none
  otc
  prescription
  controlled
}

enum ProductStatus {
  draft
  pending
  active
  inactive
  discontinued
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

model ProductImage {
  id           BigInt     @id @default(autoincrement())
  product_id   BigInt
  image_url    String
  alt_text     String?
  sort_order   Int        @default(0)
  is_primary   Boolean    @default(false)
  created_at   DateTime   @default(now())

  // Relations
  product      Product    @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id], name: "idx_product_id")
}

model ReviewImage {
  id           BigInt    @id @default(autoincrement())
  review_id    BigInt
  image_url    String
  alt_text     String?
  sort_order   Int       @default(0)
  created_at   DateTime  @default(now())

  // Relation to ProductReview
  review       ProductReview @relation(fields: [review_id], references: [id], onDelete: Cascade)

  @@index([review_id], name: "idx_review_id")
}

model ProductReview {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt
  product_id          BigInt
  order_id            BigInt?    // Optional field
  rating              Int
  review_text         String?
  pros                String?
  cons                String?
  verified_purchase   Boolean     @default(false)
  helpful_votes       Int         @default(0)
  total_votes         Int         @default(0)
  status              ReviewStatus @default(PENDING)
  moderation_notes    String?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  // Relations
  product             Product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user                User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order               Order?       @relation(fields: [order_id], references: [id], onDelete: SetNull)

  @@index([product_id], name: "idx_product_id_review")
  @@index([user_id], name: "idx_user_id_review")
  @@index([rating], name: "idx_rating")
  @@index([status], name: "idx_status_review")
  @@index([verified_purchase], name: "idx_verified_purchase")

  @@unique([user_id, product_id, order_id], name: "unique_user_product_order")
  ReviewImage ReviewImage[] //an image left on the review
  ReviewVote ReviewVote[] //the votes in product reviews
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id                     BigInt      @id @default(autoincrement())
  order_number           String      @unique
  customer_id            BigInt
  status                 OrderStatus @default(PENDING)
  payment_status         PaymentStatus @default(PENDING)
  subtotal               Decimal
  tax_amount             Decimal     @default(0.00)
  discount_amount        Decimal     @default(0.00)
  delivery_fee           Decimal     @default(0.00)
  total_amount           Decimal
  currency               String      @default("DZD")
  
  // Delivery Information
  delivery_method        DeliveryMethod @default(STANDARD)
  delivery_address_id    BigInt?
  delivery_notes         String?
  estimated_delivery_date DateTime?
  actual_delivery_date   DateTime?

  // Prescription Information
  has_prescription_items Boolean     @default(false)
  prescription_verified  Boolean     @default(false)
  prescription_notes     String?

  // Order Notes
  customer_notes         String?
  admin_notes            String?

  // Timestamps
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt
  confirmed_at           DateTime?
  shipped_at             DateTime?
  delivered_at           DateTime?
  cancelled_at           DateTime?

  // Relations
  customer               User        @relation(fields: [customer_id], references: [id])
  delivery_address       UserAddress? @relation(fields: [delivery_address_id], references: [id])

  @@index([customer_id], name: "idx_customer_id")
  @@index([order_number], name: "idx_order_number")
  @@index([status], name: "idx_status_order")
  @@index([payment_status], name: "idx_payment_status")
  @@index([created_at], name: "idx_created_at")
  ProductReview ProductReview[] //have product reviews
  SupplierReview SupplierReview[] //what supplier says
  Prescription Prescription[] //to specifie witch products
  SupportTicket SupportTicket[] //order's ticket
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

enum DeliveryMethod {
  STANDARD
  EXPRESS
  PICKUP
}

model ReviewVote {
  id          BigInt     @id @default(autoincrement())
  review_id   BigInt
  user_id     BigInt
  vote_type   VoteType
  created_at  DateTime   @default(now())

  // Relations
  review      ProductReview @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, review_id], name: "unique_user_review_vote")
  @@index([review_id], name: "idx_review_id_review_vote")
  @@index([user_id], name: "idx_user_id_review_vote")
}

enum VoteType {
  helpful
  not_helpful
}

model SupplierReview {
  id                   BigInt     @id @default(autoincrement())
  supplier_id          BigInt
  customer_id          BigInt
  order_id             BigInt?
  rating               Int         // Simulating TINYINT with range validation in code
  communication_rating Int?        // Optional rating
  delivery_rating      Int?        // Optional rating
  product_quality_rating Int?      // Optional rating
  review_text          String?
  status               ReviewStatus @default(PENDING)
  created_at           DateTime   @default(now())

  // Relations
  supplier             User       @relation("Supplier", fields: [supplier_id], references: [id], onDelete: Cascade)
  customer             User       @relation("Customer", fields: [customer_id], references: [id], onDelete: Cascade)
  order                Order?     @relation(fields: [order_id], references: [id], onDelete: SetNull)

  @@index([supplier_id], name: "idx_supplier_id_supplier_rev")
  @@index([customer_id], name: "idx_customer_id_supplier_rev")
  @@index([rating], name: "idx_rating_supplier_rev")
  @@unique([customer_id, supplier_id, order_id], name: "unique_customer_supplier_order")
}

model Prescription {
  id                    BigInt      @id @default(autoincrement())
  user_id               BigInt
  order_id              BigInt?
  prescription_number   String?
  doctor_name           String?
  doctor_license        String?
  hospital_clinic       String?
  issue_date            DateTime?
  expiry_date           DateTime?

  // File Information
  file_url              String
  file_type             String?
  file_size             Int?

  // Verification Status
  verification_status   VerificationStatus @default(pending)
  verified_by           BigInt?
  verified_at           DateTime?
  verification_notes    String?

  // Patient Information
  patient_name          String?
  patient_age           Int?
  patient_weight        Decimal?
  patient_allergies     String?

  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt

  // Relations
  order                 Order?     @relation(fields: [order_id], references: [id], onDelete: SetNull)
  owner            User        @relation("PrescriptionOwner", fields: [user_id], references: [id])
  verifier         User?       @relation("PrescriptionVerifier", fields: [verified_by], references: [id])

  @@index([user_id], name: "idx_user_id_prescription")
  @@index([order_id], name: "idx_order_id")
  @@index([verification_status], name: "idx_verification_status_prescription")
  @@index([prescription_number], name: "idx_prescription_number")
  PrescriptionItem PrescriptionItem[] //items of perceptions
}

model PrescriptionItem {
  id                   BigInt     @id @default(autoincrement())
  prescription_id      BigInt
  product_id           BigInt?
  medication_name      String
  dosage               String?
  frequency            String?
  duration             String?
  quantity_prescribed  Int?
  instructions         String?
  substitution_allowed Boolean    @default(true)
  matched_product_id   BigInt?
  status               PrescriptionItemStatus @default(PENDING)

  // Relations
  prescription         Prescription @relation(fields: [prescription_id], references: [id], onDelete: Cascade)
  product              Product?   @relation("OriginalProduct", fields: [product_id], references: [id], onDelete: SetNull)
  matched_product      Product?   @relation("MatchedProduct", fields: [matched_product_id], references: [id], onDelete: SetNull)

  @@index([prescription_id], name: "idx_prescription_id")
  @@index([product_id], name: "idx_product_id_prescription_item")
  @@index([status], name: "idx_status_prescription_item")
}

enum PrescriptionItemStatus {
  PENDING
  MATCHED
  NOT_AVAILABLE
  SUBSTITUTED
}

model NotificationTemplate {
  id           Int       @id @default(autoincrement())
  name         String    @unique @db.VarChar(100)
  type         NotificationTypeTemp
  subject_ar   String?
  subject_fr   String?
  subject_en   String?
  content_ar   String?
  content_fr   String?
  content_en   String?
  variables    Json?
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([name], name: "idx_name_notification_template")
  @@index([type], name: "idx_type_notification_template")
  @@index([is_active], name: "idx_active_notification_template")
  Notification Notification[] //notification is from a template
}

enum NotificationTypeTemp {
  email
  sms
  push
  in_app
}

model Notification {
  id              BigInt      @id @default(autoincrement())
  user_id         BigInt
  template_id     Int?
  type            NotificationType
  channel         NotificationChannel
  title           String
  content         String
  action_url      String?
  action_text     String?
  priority        NotificationPriority @default(medium)
  status          NotificationStatus @default(pending)
  sent_at         DateTime?
  delivered_at    DateTime?
  read_at         DateTime?
  metadata        Json?
  retry_count     Int         @default(0)
  max_retries     Int         @default(3)
  created_at      DateTime    @default(now())

  // Relations
  user            User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template        NotificationTemplate? @relation(fields: [template_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id_notification")
  @@index([type], name: "idx_type_notification")
  @@index([channel], name: "idx_channel_notification")
  @@index([status], name: "idx_status_notification")
  @@index([priority], name: "idx_priority_notification")
  @@index([created_at], name: "idx_created_at_notification")
}

enum NotificationType {
  order
  payment
  delivery
  product
  promotion
  system
  review
}

enum NotificationChannel {
  email
  sms
  push
  in_app
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

enum NotificationStatus {
  pending
  sent
  delivered
  read
  failed
}

model NotificationPreference {
  id                  BigInt      @id @default(autoincrement())
  user_id             BigInt
  notification_type   NotificationType
  email_enabled       Boolean     @default(true)
  sms_enabled         Boolean     @default(true)
  push_enabled        Boolean     @default(true)
  in_app_enabled      Boolean     @default(true)
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  // Relation
  user                User        @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, notification_type], name: "unique_user_notification_type")
  @@index([user_id], name: "idx_user_id_notification_preference")
}

model SupportTicket {
  id                    BigInt     @id @default(autoincrement())
  ticket_number         String     @unique
  user_id               BigInt
  order_id              BigInt?
  category              SupportCategory
  priority              SupportPriority @default(medium)
  status                SupportStatus @default(open)
  subject               String
  description           String
  assigned_to           BigInt?
  assigned_at           DateTime?
  resolution            String?
  resolved_at           DateTime?
  resolved_by           BigInt?
  satisfaction_rating   Int?        // Simulating TINYINT with range validation in code
  satisfaction_feedback String?
  created_at            DateTime   @default(now())
  updated_at            DateTime   @updatedAt

  // Relations
  reporter            User       @relation("SupportReporter", fields: [user_id], references: [id])
  order               Order?     @relation(fields: [order_id], references: [id])
  assignee            User?      @relation("SupportAssignee", fields: [assigned_to], references: [id])
  resolver            User?      @relation("SupportResolver", fields: [resolved_by], references: [id])

  @@index([user_id], name: "idx_user_id_support_ticket")
  @@index([order_id], name: "idx_order_id_support_ticket")
  @@index([ticket_number], name: "idx_ticket_number")
  @@index([status], name: "idx_status_support_ticket")
  @@index([priority], name: "idx_priority_support_ticket")
  @@index([assigned_to], name: "idx_assigned_to_support_ticket")
  SupportTicketMessage SupportTicketMessage[] //the message of support ticket
}

enum SupportCategory {
  order_issue
  payment_issue
  delivery_issue
  product_issue
  account_issue
  technical_issue
  general_inquiry
}

enum SupportPriority {
  low
  medium
  high
  urgent
}

enum SupportStatus {
  open
  in_progress
  waiting_customer
  resolved
  closed
}

model SupportTicketMessage {
  id              BigInt      @id @default(autoincrement())
  ticket_id       BigInt
  sender_id       BigInt
  message         String
  is_internal     Boolean     @default(false)
  attachments     Json?
  created_at      DateTime    @default(now())

  // Relations
  ticket          SupportTicket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  sender          User        @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([ticket_id], name: "idx_ticket_id")
  @@index([sender_id], name: "idx_sender_id")
  @@index([created_at], name: "idx_created_at_support_ticket_message")
}

model LiveChatSession {
  id         BigInt      @id @default(autoincrement())
  user_id    BigInt
  agent_id   BigInt?
  status     ChatStatus  @default(WAITING)
  started_at DateTime    @default(now())
  ended_at   DateTime?
  rating     Int?
  feedback   String?

  // Relations
  user       User        @relation("ChatUser", fields: [user_id], references: [id], onDelete: Cascade)
  agent      User?       @relation("ChatAgent", fields: [agent_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id_chat")
  @@index([agent_id], name: "idx_agent_id_chat")
  @@index([status], name: "idx_status_chat")
  LiveChatMessage LiveChatMessage[]
}

enum ChatStatus {
  WAITING
  ACTIVE
  ENDED
}

model LiveChatMessage {
  id           BigInt     @id @default(autoincrement())
  session_id   BigInt
  sender_id    BigInt
  message      String
  message_type LiveChatMessageType @default(TEXT)
  attachment_url String?
  created_at   DateTime   @default(now())

  // Relations
  session      LiveChatSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  sender       User        @relation("ChatMessageSender", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([session_id], name: "idx_session_id")
  @@index([sender_id], name: "idx_sender_id_live_chat_message")
  @@index([created_at], name: "idx_created_at_live_chat_message")
}

enum LiveChatMessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

model UserActivityLog {
  id            BigInt     @id @default(autoincrement())
  user_id       BigInt?
  session_id    String
  activity_type ActivityType
  entity_type   String?      // e.g. 'product', 'order'
  entity_id     BigInt?
  details       Json?
  ip_address    String?
  user_agent    String?
  referer       String?
  created_at    DateTime   @default(now())

  // Relation to User (optional since user can be anonymous)
  user          User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id_user_activity_log")
  @@index([activity_type], name: "idx_activity_type")
  @@index([entity_type, entity_id], name: "idx_entity")
  @@index([created_at], name: "idx_created_at_user_activity_log")
}

enum ActivityType {
  login
  logout
  view_product
  add_to_cart
  remove_from_cart
  search
  place_order
  payment
  review
}

model SearchQuery {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt?
  query               String
  results_count       Int        @default(0)
  filters_applied     Json?
  clicked_product_id  BigInt?
  ip_address          String?
  created_at          DateTime   @default(now())

  // Relations
  user                User?      @relation(fields: [user_id], references: [id], onDelete: SetNull)
  clicked_product     Product?   @relation(fields: [clicked_product_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id_search")
  @@index([created_at], name: "idx_created_at_search")
}

model PageView {
  id           BigInt     @id @default(autoincrement())
  user_id      BigInt?
  session_id   String
  page_type    PageType
  page_url     String
  page_title   String?
  entity_id    BigInt?
  time_spent   Int?         // in seconds
  bounce       Boolean      @default(false)
  ip_address   String?
  user_agent   String?
  referer      String?
  created_at   DateTime     @default(now())

  // Relation
  user         User?        @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id], name: "idx_user_id_page_view")
  @@index([session_id], name: "idx_session_id_page_view")
  @@index([page_type], name: "idx_page_type")
  @@index([entity_id], name: "idx_entity_id")
  @@index([created_at], name: "idx_created_at_page_view")
}

enum PageType {
  home
  category
  product
  search
  cart
  checkout
  profile
  other
}

model SystemSetting {
  id            Int        @id @default(autoincrement())
  setting_key   String     @unique
  setting_value String?    
  setting_type  SettingType @default(STRING)
  category      String      @default("general")
  description   String?
  is_public     Boolean     @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@index([setting_key], name: "idx_key")
  @@index([category], name: "idx_category")
  @@index([is_public], name: "idx_public")
}

enum SettingType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  JSON
}

model Tax {
  id             Int       @id @default(autoincrement())
  name           String
  type           TaxType
  rate           Decimal
  applicable_to  TaxApplicableTo @default(ALL)
  category_ids   Json?
  product_ids    Json?
  wilaya_ids     Json?      // Apply to specific wilayas
  min_amount     Decimal    @default(0.00)
  is_active      Boolean    @default(true)
  created_at     DateTime   @default(now())

  @@index([type], name: "idx_tax_type")
  @@index([is_active], name: "idx_tax_active")
}

enum TaxType {
  percentage
  fixed
}

enum TaxApplicableTo {
  ALL
  CATEGORY
  PRODUCT
}

model EmailQueue {
  id            BigInt      @id @default(autoincrement())
  to_email      String
  to_name       String?
  from_email    String?
  from_name     String?
  subject       String
  body_html     String?
  body_text     String?
  attachments   Json?
  priority      EmailPriority @default(medium)
  max_retries   Int           @default(3)
  retry_count   Int           @default(0)
  status        EmailStatus   @default(pending)
  error_message String?
  sent_at       DateTime?
  created_at    DateTime      @default(now())

  @@index([status], name: "idx_status_email_queue")
  @@index([priority], name: "idx_priority")
  @@index([created_at], name: "idx_created_at_email_queue")
}

enum EmailPriority {
  low
  medium
  high
}

enum EmailStatus {
  pending
  sent
  failed
}

model SmsQueue {
  id             BigInt      @id @default(autoincrement())
  phone_number   String
  message        String
  priority       SmsPriority @default(MEDIUM)
  max_retries    Int           @default(3)
  retry_count    Int           @default(0)
  status         SmsStatus     @default(PENDING)
  error_message  String?
  sent_at        DateTime?
  created_at     DateTime      @default(now())

  @@index([phone_number], name: "idx_phone_sms")
  @@index([status], name: "idx_status_sms")
  @@index([priority], name: "idx_priority_sms")
  @@index([created_at], name: "idx_created_at_sms")
}

enum SmsPriority {
  LOW
  MEDIUM
  HIGH
}

enum SmsStatus {
  PENDING
  SENT
  FAILED
}

model AdminActivityLog {
  id          BigInt      @id @default(autoincrement())
  admin_id    BigInt
  action      String
  entity_type String?
  entity_id   BigInt?
  old_values  Json?
  new_values  Json?
  ip_address  String?
  user_agent  String?
  created_at  DateTime    @default(now())

  // Relation to User (admin)
  admin       User        @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  @@index([admin_id], name: "idx_admin_id")
  @@index([action], name: "idx_action")
  @@index([entity_type, entity_id], name: "idx_entity_admin_activity_log")
  @@index([created_at], name: "idx_created_at_admin_activity_log")
}